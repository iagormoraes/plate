{"version":3,"file":"index.js","sources":["../src/createExcalidrawPlugin.ts","../src/components/ExcalidrawElement/ExcalidrawElement.styles.ts","../src/components/ExcalidrawElement/ExcalidrawElement.tsx","../src/components/ExcalidrawToolbarButton/ExcalidrawToolbarButton.tsx","../src/transforms/insertExcalidraw.ts"],"sourcesContent":["import { createPluginFactory } from '@udecode/plate-core';\n\nexport const ELEMENT_EXCALIDRAW = 'excalidraw';\n\n/**\n * Enables support for Excalidraw drawing tool within a Slate document\n */\nexport const createExcalidrawPlugin = createPluginFactory({\n  key: ELEMENT_EXCALIDRAW,\n  isElement: true,\n  isVoid: true,\n});\n","import { Value } from '@udecode/plate-core';\nimport { createStyles } from '@udecode/plate-styled-components';\nimport tw from 'twin.macro';\nimport { ExcalidrawElementProps } from './ExcalidrawElement.types';\n\nexport const getExcalidrawElementStyles = <V extends Value>(\n  props: ExcalidrawElementProps<V>\n) =>\n  createStyles(\n    { prefixClassNames: 'ExcalidrawElement', ...props },\n    {\n      excalidrawWrapper: tw`height[600px]`,\n    }\n  );\n","import React, { useEffect, useRef, useState } from 'react';\nimport { ExcalidrawImperativeAPI } from '@excalidraw/excalidraw/types/types';\nimport { Value } from '@udecode/plate-core';\nimport { getRootProps } from '@udecode/plate-styled-components';\nimport { TExcalidrawProps } from '../../types';\nimport { getExcalidrawElementStyles } from './ExcalidrawElement.styles';\nimport { ExcalidrawElementProps } from './ExcalidrawElement.types';\n\nexport const ExcalidrawElement = <V extends Value>(\n  props: ExcalidrawElementProps<V>\n) => {\n  const {\n    attributes,\n    children,\n    nodeProps,\n    element,\n    scrollToContent = true,\n    libraryItems = [],\n    excalidrawProps: _excalidrawProps,\n  } = props;\n\n  const rootProps = getRootProps(props);\n\n  const [Excalidraw, setExcalidraw] = useState<any>(null);\n  useEffect(() => {\n    import('@excalidraw/excalidraw').then((comp) =>\n      setExcalidraw(comp.Excalidraw)\n    );\n  });\n\n  const styles = getExcalidrawElementStyles(props);\n  const _excalidrawRef = useRef<ExcalidrawImperativeAPI>(null);\n\n  // const editor = useEditorRef();\n\n  const excalidrawProps: TExcalidrawProps = {\n    excalidrawRef: _excalidrawRef,\n    initialData: {\n      elements: element.data?.elements,\n      appState: element.data?.state,\n      scrollToContent,\n      libraryItems,\n    },\n    autoFocus: false,\n    // onChange: (elements: readonly ExcalidrawElementType[], state: AppState) => {\n    // const path = findNodePath(editor, element);\n\n    // FIXME: setNodes triggers render loop as onChange is triggered on rerender\n    // in the meantime, the prop can be used to save the data outside slate\n    // setNodes(editor, { data: { elements, state } }, { at: path });\n    // },\n    ..._excalidrawProps,\n  };\n\n  return (\n    <div {...attributes} {...rootProps}>\n      <div contentEditable={false}>\n        <div\n          css={styles.excalidrawWrapper?.css}\n          className={styles.excalidrawWrapper?.className}\n        >\n          {Excalidraw && (\n            <Excalidraw {...nodeProps} {...(excalidrawProps as any)} />\n          )}\n        </div>\n      </div>\n      {children}\n    </div>\n  );\n};\n\n// const ActionButtons = () => (\n//   <div className=\"button-wrapper\">\n//     <button className=\"update-scene\" onClick={updateScene} type=\"button\">\n//       Update Scene\n//     </button>\n//     <button\n//       className=\"reset-scene\"\n//       onClick={() => {\n//         excalidrawRef?.current!.resetScene();\n//       }}\n//       type=\"button\"\n//     >\n//       Reset Scene\n//     </button>\n//     <label>\n//       <input\n//         type=\"checkbox\"\n//         checked={viewModeEnabled}\n//         onChange={() => setViewModeEnabled(!viewModeEnabled)}\n//       />\n//       View mode\n//     </label>\n//     <label>\n//       <input\n//         type=\"checkbox\"\n//         checked={zenModeEnabled}\n//         onChange={() => setZenModeEnabled(!zenModeEnabled)}\n//       />\n//       Zen mode\n//     </label>\n//     <label>\n//       <input\n//         type=\"checkbox\"\n//         checked={gridModeEnabled}\n//         onChange={() => setGridModeEnabled(!gridModeEnabled)}\n//       />\n//       Grid mode\n//     </label>\n//   </div>\n// );\n\n// const ExportButtons = () => (\n//   <div className=\"export-wrapper button-wrapper\">\n//     <button\n//       onClick={() => {\n//         const svg = exportToSvg({\n//           elements: excalidrawRef.current!.getSceneElements(),\n//           appState: {\n//             ...initialData.appState,\n//           } as any,\n//         });\n//         document.querySelector('.export-svg')!.innerHTML = svg.outerHTML;\n//       }}\n//       type=\"button\"\n//     >\n//       Export to SVG\n//     </button>\n//     <div className=\"export export-svg\" />\n//\n//     <button\n//       onClick={async () => {\n//         const blob = await exportToBlob({\n//           elements: excalidrawRef.current!.getSceneElements(),\n//           mimeType: 'image/png',\n//           appState: {\n//             ...initialData.appState,\n//           } as any,\n//         });\n//         setBlobUrl(window.URL.createObjectURL(blob));\n//       }}\n//       type=\"button\"\n//     >\n//       Export to Blob\n//     </button>\n//     <div className=\"export export-blob\">\n//       <img src={blobUrl!} alt=\"\" />\n//     </div>\n//\n//     <button\n//       onClick={() => {\n//         const canvas = exportToCanvas({\n//           elements: excalidrawRef.current!.getSceneElements(),\n//           appState: {\n//             ...initialData.appState,\n//           } as any,\n//         });\n//         setCanvasUrl(canvas.toDataURL());\n//       }}\n//       type=\"button\"\n//     >\n//       Export to Canvas\n//     </button>\n//     <div className=\"export export-canvas\">\n//       <img src={canvasUrl!} alt=\"\" />\n//     </div>\n//   </div>\n// );\n","import React from 'react';\nimport {\n  focusEditor,\n  getPluginType,\n  someNode,\n  useEventPlateId,\n  usePlateEditorState,\n} from '@udecode/plate-core';\nimport { ToolbarButton, ToolbarButtonProps } from '@udecode/plate-ui-toolbar';\nimport { ELEMENT_EXCALIDRAW, insertExcalidraw } from '../../index';\n\nexport interface ExcalidrawToolbarButtonProps extends ToolbarButtonProps {}\n\nexport const ExcalidrawToolbarButton = ({\n  id,\n  ...props\n}: ToolbarButtonProps) => {\n  const editor = usePlateEditorState(useEventPlateId(id));\n\n  const type = getPluginType(editor, ELEMENT_EXCALIDRAW);\n  const isExcalidraw =\n    !!editor?.selection && someNode(editor, { match: { type } });\n\n  return (\n    <ToolbarButton\n      active={isExcalidraw}\n      onMouseDown={async (event: any) => {\n        if (!editor) return;\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        focusEditor(editor, editor.selection ?? editor.prevSelection!);\n\n        setTimeout(() => {\n          insertExcalidraw(editor);\n        }, 0);\n      }}\n      {...props}\n    />\n  );\n};\n","import {\n  getParentNode,\n  insertNodes,\n  PlateEditor,\n  PlatePluginKey,\n  TNodeProps,\n  Value,\n} from '@udecode/plate-core';\nimport { ELEMENT_EXCALIDRAW } from '../createExcalidrawPlugin';\nimport { TExcalidrawElement } from '../types';\n\nexport const insertExcalidraw = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    key = ELEMENT_EXCALIDRAW,\n    ...props\n  }: TNodeProps<TExcalidrawElement> & PlatePluginKey = {}\n): void => {\n  if (!editor.selection) return;\n\n  const selectionParentEntry = getParentNode(editor, editor.selection);\n  if (!selectionParentEntry) return;\n\n  const [, path] = selectionParentEntry;\n\n  insertNodes<TExcalidrawElement>(\n    editor,\n    {\n      type: key,\n      children: [{ text: '' }],\n      ...props,\n    },\n    { at: path }\n  );\n};\n"],"names":["ELEMENT_EXCALIDRAW","createExcalidrawPlugin","createPluginFactory","key","isElement","isVoid","getExcalidrawElementStyles","props","createStyles","prefixClassNames","excalidrawWrapper","ExcalidrawElement","attributes","children","nodeProps","element","scrollToContent","libraryItems","excalidrawProps","_excalidrawProps","rootProps","getRootProps","Excalidraw","setExcalidraw","useState","useEffect","then","comp","styles","_excalidrawRef","useRef","excalidrawRef","initialData","elements","data","appState","state","autoFocus","React","className","css","ExcalidrawToolbarButton","id","editor","usePlateEditorState","useEventPlateId","type","getPluginType","isExcalidraw","selection","someNode","match","ToolbarButton","event","preventDefault","stopPropagation","focusEditor","prevSelection","setTimeout","insertExcalidraw","selectionParentEntry","getParentNode","path","insertNodes","text","at"],"mappings":"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"}